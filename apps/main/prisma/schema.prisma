generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "foreignKeys"
}

//
// The following tRPC generator can be uncomment to get some boilerplate code
// This generated code should not be used directly, it should be copy/paste/clean to match our standards
// It may just help to quickstart something quickly when having tons of new models
// (you can remove the comment above models that prevent their generation, so it's easier to find them into the generated folder)
//
// Tip: once generated, looks for "ThomasCreateInput> = z" in the folder (replace "Thomas" by your model name)
//

// generator trpc {
//   provider          = "prisma-trpc-generator"
//   output            = "./generated-for-inspiration"
//   withMiddleware    = false
//   withShield        = false
//   contextPath       = "../../../../server/context"
//   isGenerateSelect  = false
//   isGenerateInclude = false
// }

// TODO: check uuid types... should be the extension of Postgres

// Account, Session, User and VerificationToken
// Match next-auth model https://next-auth.js.org/adapters/prisma
// Underscored names are from there too

/// @@Gen.model(hide: true)
model Account {
  id                String  @id @default(cuid())
  userId            String  @unique @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

/// @@Gen.model(hide: true)
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String   @db.Uuid
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum VerificationTokenAction {
  RESET_PASSWORD
}

/// @@Gen.model(hide: true)
model VerificationToken {
  token      String                  @id
  action     VerificationTokenAction
  identifier String // Email or other user identifier
  expires    DateTime

  @@unique([token])
}

enum UserStatus {
  REGISTERED
  CONFIRMED
  DISABLED
}

/// @@Gen.model(hide: true)
model User {
  id             String     @id @default(uuid()) @db.Uuid
  firstname      String
  lastname       String
  email          String     @unique
  passwordHash   String
  status         UserStatus @default(REGISTERED)
  profilePicture String?
  lastActivityAt DateTime?  @default(now())

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?
  // TODO: https://www.prisma.io/docs/concepts/components/prisma-client/middleware/soft-delete-middleware

  Account          Account?
  LiveChatSettings LiveChatSettings?
  Session          Session[]
  Agent            Agent[]
  Admin            Admin?
  InvitationSent   Invitation[]
}

/// @@Gen.model(hide: true)
model LiveChatSettings {
  userId       String @id @db.Uuid
  sessionToken String @unique @db.Uuid

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?

  user User @relation(fields: [userId], references: [id])
}

/// @@Gen.model(hide: true)
model Address {
  id          String @id @default(uuid()) @db.Uuid
  street      String
  city        String
  postalCode  String
  countryCode String
  subdivision String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?

  Citizen Citizen?
}

enum PhoneType {
  UNSPECIFIED
  HOME
  MOBILE
}

/// @@Gen.model(hide: true)
model Phone {
  // manage enum objects like Phone/Address through native Postgres objects? To simplify structure/relations?

  id          String    @id @default(uuid()) @db.Uuid
  phoneType   PhoneType @default(UNSPECIFIED)
  callingCode String
  countryCode String
  number      String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?

  Citizen Citizen?
}

/// @@Gen.model(hide: true)
model Citizen {
  id        String  @id @default(uuid()) @db.Uuid
  email     String?
  firstname String
  lastname  String
  addressId String  @unique @db.Uuid
  phoneId   String  @unique @db.Uuid

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?

  address       Address         @relation(fields: [addressId], references: [id], onDelete: Cascade)
  phone         Phone           @relation(fields: [phoneId], references: [id], onDelete: Cascade)
  IdentityStamp IdentityStamp[]
  Case          Case?
}

/// @@Gen.model(hide: true)
model IdentityStamp {
  id        String @id @default(uuid()) @db.Uuid
  ownerType String // TODO: how to specify this... old Laravel hehe
  ownerId   String @db.Uuid
  value     String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?

  // TODO... should be type agnostic
  owner Citizen @relation(fields: [ownerId], references: [id])
}

enum CaseStatus {
  TO_PROCESS
  MAKE_XXX_CALL // TODO: ... typo?
  SYNC_WITH_CITIZEN
  SYNC_WITH_ADMINISTATION
  ABOUT_TO_CLOSE
  STUCK
}

enum CaseInitialPlatform {
  MAIL
  PHONE
  WEB
}

/// @@Gen.model(hide: true)
model Case {
  id                           String              @id @default(uuid()) @db.Uuid
  humanId                      Int                 @default(autoincrement())
  citizenId                    String              @unique @db.Uuid
  authorityId                  String              @db.Uuid
  agentId                      String?             @db.Uuid
  alreadyRequestedInThePast    Boolean
  gotAnswerFromPreviousRequest Boolean?
  description                  String              @db.Text
  units                        String
  emailCopyWanted              Boolean
  termReminderAt               DateTime?
  initiatedFrom                CaseInitialPlatform @default(WEB)
  status                       CaseStatus
  closedAt                     DateTime?
  finalConclusion              String?
  nextRequirements             String?

  // TODO: domain/origin

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?

  authority          Authority            @relation(fields: [authorityId], references: [id], onDelete: Cascade)
  citizen            Citizen              @relation(fields: [citizenId], references: [id], onDelete: Cascade)
  agent              Agent?               @relation(fields: [agentId], references: [id])
  Note               Note[]
  AttachmentsOnCases AttachmentsOnCases[]
}

/// @@Gen.model(hide: true)
model Note {
  id      String   @id @default(uuid()) @db.Uuid
  caseId  String   @db.Uuid
  date    DateTime @default(now()) @db.Date
  content String   @db.Text

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?

  case                   Case?                    @relation(fields: [caseId], references: [id], onDelete: Cascade)
  AttachmentsOnCaseNotes AttachmentsOnCaseNotes[]
}

/// @@Gen.model(hide: true)
model Agent {
  id          String @id @default(uuid()) @db.Uuid
  userId      String @db.Uuid
  authorityId String @db.Uuid

  // rights?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?

  user                    User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  authority               Authority  @relation(fields: [authorityId], references: [id], onDelete: Cascade)
  CaseAssigned            Case[]
  AuthorityWhereMainAgent Authority? @relation("AuthorityWhereMainAgent")
}

// TODO: Admin model?

enum AttachmentStatus {
  PENDING_UPLOAD
  VALID
  EXPIRED
}

enum AttachmentKind {
  CASE_DOCUMENT
  CASE_SYNTHESIS
  AUTHORITY_LOGO
  MESSAGE_DOCUMENT
}

/// @@Gen.model(hide: true)
model Attachment {
  id          String           @id @default(uuid()) @db.Uuid
  kind        AttachmentKind
  contentType String
  value       Bytes            @db.ByteA
  size        Int
  name        String?
  status      AttachmentStatus @default(PENDING_UPLOAD)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?

  Authority              Authority?
  AttachmentsOnCases     AttachmentsOnCases?
  AttachmentsOnCaseNotes AttachmentsOnCaseNotes?
}

enum AuthorityType {
  CITY
  FEDERATION_OF_CITIES
  SUBDIVISION // TODO: trad pour département
  REGION // TODO: trad pour région
}

/// @@Gen.model(hide: true)
model Authority {
  id               String        @id @default(uuid()) @db.Uuid
  name             String        @unique
  slug             String        @unique
  mainAgentId      String?       @unique @db.Uuid
  type             AuthorityType @default(CITY)
  logoAttachmentId String?       @unique @db.Uuid

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?

  mainAgent       Agent?            @relation("AuthorityWhereMainAgent", fields: [mainAgentId], references: [id])
  logo            Attachment?       @relation(fields: [logoAttachmentId], references: [id])
  AgentInvitation AgentInvitation[]
  Case            Case[]
  Agent           Agent[]
}

enum CaseAttachmentType {
  AGENT
  ADMINISTRATION
  CITIZEN
}

/// @@Gen.model(hide: true)
model AttachmentsOnCases {
  caseId       String             @db.Uuid
  attachmentId String             @unique @db.Uuid
  transmitter  CaseAttachmentType @default(CITIZEN)

  case       Case       @relation(fields: [caseId], references: [id], onDelete: Cascade)
  attachment Attachment @relation(fields: [attachmentId], references: [id], onDelete: Cascade)

  @@id([caseId, attachmentId])
}

/// @@Gen.model(hide: true)
model AttachmentsOnCaseNotes {
  noteId       String             @db.Uuid
  attachmentId String             @unique @db.Uuid
  transmitter  CaseAttachmentType @default(CITIZEN)

  note       Note       @relation(fields: [noteId], references: [id], onDelete: Cascade)
  attachment Attachment @relation(fields: [attachmentId], references: [id], onDelete: Cascade)

  @@id([noteId, attachmentId])
}

/// @@Gen.model(hide: true)
model Admin {
  id            String  @id @default(uuid()) @db.Uuid
  userId        String  @unique @db.Uuid
  canEverything Boolean @default(true)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  CANCELED
}

/// @@Gen.model(hide: true)
model Invitation {
  id               String           @id @default(uuid()) @db.Uuid
  issuerId         String           @db.Uuid
  inviteeEmail     String
  inviteeFirstname String?
  inviteeLastname  String?
  token            String
  status           InvitationStatus @default(PENDING)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?

  issuer          User             @relation(fields: [issuerId], references: [id], onDelete: Cascade)
  AgentInvitation AgentInvitation?
  AdminInvitation AdminInvitation?
}

/// @@Gen.model(hide: true)
model AgentInvitation {
  id             String  @id @default(uuid()) @db.Uuid
  invitationId   String  @unique @db.Uuid
  authorityId    String  @db.Uuid
  grantMainAgent Boolean @default(false)

  invitation Invitation @relation(fields: [invitationId], references: [id], onDelete: Cascade)
  authority  Authority  @relation(fields: [authorityId], references: [id], onDelete: Cascade)
}

/// @@Gen.model(hide: true)
model AdminInvitation {
  id            String  @id @default(uuid()) @db.Uuid
  invitationId  String  @unique @db.Uuid
  canEverything Boolean @default(true)

  invitation Invitation @relation(fields: [invitationId], references: [id], onDelete: Cascade)
}
