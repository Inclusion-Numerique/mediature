name: Continuous Integration
on:
  push:
    branches:
      - main
      - dev
env:
  APP_NAME: mediature
  CONTAINER_REGISTRY: ghcr.io
  CONTAINER_IMAGE_FOLDER: ghcr.io/${{ github.repository }}
  NODE_VERSION: 16.15.0
  PNPM_VERSION: 7.16.0
  CYPRESS_CACHE_FOLDER_SUFFIX: .cache/Cypress
jobs:
  requirements:
    name: Continuous Integration
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set environment for branch
        run: |
          if [[ $GITHUB_REF_NAME == 'main' ]]; then
              echo "APP_MODE=prod" >> $GITHUB_ENV
          elif [[ $GITHUB_REF_NAME == 'dev' ]]; then
              echo "APP_MODE=dev" >> $GITHUB_ENV
          else
              echo "APP_MODE=test" >> $GITHUB_ENV
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - uses: pnpm/action-setup@v2
        name: Install pnpm
        id: pnpm-install
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Export pnpm store directory as an environment variable
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_ENV

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        env:
          CYPRESS_CACHE_FOLDER: ${{ env.STORE_PATH }}/${{ env.CYPRESS_CACHE_FOLDER_SUFFIX }}
        run: make deps

      - name: Lint
        run: make lint

      - name: Format check
        run: make format-check

      - name: Prepare tests
        run: make test-prepare

      - name: Test unit
        run: make test-unit

      - name: Build
        env:
          SENTRY_URL: ${{ secrets.SENTRY_URL }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
          SENTRY_RELEASE_UPLOAD: true
        run: make build

      - name: Test end-to-end
        env:
          CYPRESS_CACHE_FOLDER: ${{ env.STORE_PATH }}/${{ env.CYPRESS_CACHE_FOLDER_SUFFIX }}
        run: make test-e2e

      # TODO: enable again once Next 13 with "appDir: true" is compatible with `next export`
      # Ref: https://beta.nextjs.org/docs/app-directory-roadmap#supported-and-planned-features
      # - name: Accessibility with Lighthouse
      #   run: make accessibility
      #   env:
      #     LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      # - name: Release
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      #   run: npx semantic-release

  publish-chromatic:
    name: Publish to Chromatic
    # if: github.ref_name == 'dev' || github.ref_name == 'prod'
    needs: [requirements]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - uses: pnpm/action-setup@v2
        name: Install pnpm
        id: pnpm-install
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Install turbo
        run: npm install -g turbo

      - name: Export pnpm store directory as an environment variable
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_ENV

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Reduce dependency list
        run: turbo prune --scope=docs

      - name: Install dependencies
        env:
          CYPRESS_CACHE_FOLDER: ${{ env.STORE_PATH }}/${{ env.CYPRESS_CACHE_FOLDER_SUFFIX }}
        run: pnpm install

      - uses: chromaui/action@v1
        env:
          CHROMATIC_PROJECT_TOKEN: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}
        with:
          # Note: since we use `buildScriptName` we have to specify some of those parameters into the underlying `package.json` script named `chromatic`
          projectToken: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}
          workingDir: apps/docs
          buildScriptName: chromatic
          autoAcceptChanges: true # TODO: adjust in the future
          onlyChanged: false # TODO: adjust in the future
          exitZeroOnChanges: true

  #
  # Note: since we use Scalingo we dropped the usage of Docker images. Commenting this section for now
  # but the following could help deploying to another platform that accepts Docker images.
  #

  # build-and-push-images:
  #   name: Build and push container images
  #   if: github.ref_name == 'dev' || github.ref_name == 'main'
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: read
  #     packages: write
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3

  #     - name: Log in to the Container registry
  #       uses: docker/login-action@v2
  #       with:
  #         registry: ${{ env.CONTAINER_REGISTRY }}
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}

  #     - name: '"main" image'
  #       uses: docker/build-push-action@v3
  #       with:
  #         context: .
  #         file: ./apps/main/Dockerfile
  #         push: true
  #         tags: ${{ env.CONTAINER_IMAGE_FOLDER }}/${{ env.APP_NAME }}-${{ github.ref_name }}:${{ github.sha }},${{ env.CONTAINER_IMAGE_FOLDER }}/${{ env.APP_NAME }}-${{ github.ref_name }}:latest

  #     - name: '"docs" image'
  #       uses: docker/build-push-action@v3
  #       with:
  #         context: .
  #         file: ./apps/docs/Dockerfile
  #         push: true
  #         tags: ${{ env.CONTAINER_IMAGE_FOLDER }}/${{ env.APP_NAME }}-docs-${{ github.ref_name }}:${{ github.sha }},${{ env.CONTAINER_IMAGE_FOLDER }}/${{ env.APP_NAME }}-docs-${{ github.ref_name }}:latest

  # deploy-dev:
  #   name: Deploy to development
  #   if: github.ref_name == 'dev'
  #   environment:
  #     name: dev
  #   needs: [requirements]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - run: echo Should deploy the Docker image to development

  # deploy-prod:
  #   name: Deploy to production
  #   if: github.ref_name == 'main'
  #   environment:
  #     name: prod
  #   needs: [requirements]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - run: echo Should deploy the Docker image to production
